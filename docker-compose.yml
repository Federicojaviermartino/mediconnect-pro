version: '3.8'

services:
  # Databases
  postgres:
    image: postgres:15-alpine
    container_name: mediconnect-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_MULTIPLE_DATABASES: mediconnect_auth,mediconnect_patients,mediconnect_consultations
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/create-multiple-databases.sh:/docker-entrypoint-initdb.d/create-multiple-databases.sh
    networks:
      - mediconnect

  mongodb:
    image: mongo:7
    container_name: mediconnect-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: mongo123
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - mediconnect

  redis:
    image: redis:7-alpine
    container_name: mediconnect-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - mediconnect

  # Message Brokers
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: mediconnect-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - mediconnect

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: mediconnect-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - mediconnect

  mqtt-broker:
    image: eclipse-mosquitto:2.0
    container_name: mediconnect-mqtt
    ports:
      - "1883:1883"
      - "9001:9001"
    volumes:
      - ./config/mosquitto.conf:/mosquitto/config/mosquitto.conf
      - mqtt_data:/mosquitto/data
    networks:
      - mediconnect

  # Microservices
  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
    container_name: mediconnect-auth-service
    environment:
      NODE_ENV: production
      PORT: 3001
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      DB_NAME: mediconnect_auth
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: ${JWT_SECRET:-your-secret-key}
      JWT_EXPIRES_IN: 15m
      REFRESH_TOKEN_EXPIRES_IN: 7d
    ports:
      - "3001:3001"
    depends_on:
      - postgres
      - redis
    networks:
      - mediconnect
    restart: unless-stopped

  patient-service:
    build:
      context: ./services/patient-service
      dockerfile: Dockerfile
    container_name: mediconnect-patient-service
    environment:
      NODE_ENV: production
      PORT: 3002
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      DB_NAME: mediconnect_patients
      KAFKA_BROKERS: kafka:29092
    ports:
      - "3002:3002"
    depends_on:
      - postgres
      - kafka
    networks:
      - mediconnect
    restart: unless-stopped

  vitals-service:
    build:
      context: ./services/vitals-service
      dockerfile: Dockerfile
    container_name: mediconnect-vitals-service
    environment:
      NODE_ENV: production
      PORT: 3003
      MONGODB_URI: mongodb://root:mongo123@mongodb:27017/mediconnect_vitals?authSource=admin
      MQTT_BROKER_URL: mqtt://mqtt-broker:1883
      MQTT_USERNAME: mediconnect
      MQTT_PASSWORD: ${MQTT_PASSWORD:-mqtt123}
      KAFKA_BROKERS: kafka:29092
    ports:
      - "3003:3003"
    depends_on:
      - mongodb
      - mqtt-broker
      - kafka
    networks:
      - mediconnect
    restart: unless-stopped

  consultation-service:
    build:
      context: ./services/consultation-service
      dockerfile: Dockerfile
    container_name: mediconnect-consultation-service
    environment:
      NODE_ENV: production
      PORT: 3004
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      DB_NAME: mediconnect_consultations
      TWILIO_ACCOUNT_SID: ${TWILIO_ACCOUNT_SID}
      TWILIO_API_KEY: ${TWILIO_API_KEY}
      TWILIO_API_SECRET: ${TWILIO_API_SECRET}
      KAFKA_BROKERS: kafka:29092
    ports:
      - "3004:3004"
    depends_on:
      - postgres
      - kafka
    networks:
      - mediconnect
    restart: unless-stopped

  ml-service:
    build:
      context: ./services/ml-service
      dockerfile: Dockerfile
    container_name: mediconnect-ml-service
    environment:
      ENVIRONMENT: production
      PORT: 8000
      MONGODB_URI: mongodb://root:mongo123@mongodb:27017/mediconnect_ml?authSource=admin
      PATIENT_SERVICE_URL: http://patient-service:3002
      VITALS_SERVICE_URL: http://vitals-service:3003
      KAFKA_BROKERS: kafka:29092
    ports:
      - "8000:8000"
    depends_on:
      - mongodb
      - kafka
    networks:
      - mediconnect
    restart: unless-stopped

  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    container_name: mediconnect-api-gateway
    environment:
      NODE_ENV: production
      PORT: 3000
      AUTH_SERVICE_URL: http://auth-service:3001
      PATIENT_SERVICE_URL: http://patient-service:3002
      VITALS_SERVICE_URL: http://vitals-service:3003
      CONSULTATION_SERVICE_URL: http://consultation-service:3004
      ML_SERVICE_URL: http://ml-service:8000
      JWT_SECRET: ${JWT_SECRET:-your-secret-key}
    ports:
      - "3000:3000"
    depends_on:
      - auth-service
      - patient-service
      - vitals-service
      - consultation-service
      - ml-service
    networks:
      - mediconnect
    restart: unless-stopped

  # Frontend
  web-frontend:
    build:
      context: ./frontend/web
      dockerfile: Dockerfile
    container_name: mediconnect-web
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:3000
      NEXT_PUBLIC_WS_URL: ws://localhost:3000
    ports:
      - "3100:3000"
    depends_on:
      - api-gateway
    networks:
      - mediconnect
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: mediconnect-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/ssl:/etc/nginx/ssl:ro
    depends_on:
      - api-gateway
      - web-frontend
    networks:
      - mediconnect
    restart: unless-stopped

volumes:
  postgres_data:
  mongodb_data:
  redis_data:
  mqtt_data:

networks:
  mediconnect:
    driver: bridge
