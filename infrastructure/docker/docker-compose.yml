version: '3.8'

services:
  # PostgreSQL - Main Database
  postgres:
    image: postgres:15-alpine
    container_name: mediconnect-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-mediconnect_admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-dev_password_123}
      POSTGRES_DB: ${POSTGRES_DB:-mediconnect_db}
      POSTGRES_MULTIPLE_DATABASES: mediconnect_auth,mediconnect_patient
    ports:
      - '${POSTGRES_PORT:-5432}:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - mediconnect-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER:-mediconnect_admin}']
      interval: 10s
      timeout: 5s
      retries: 5

  # TimescaleDB - Time-series Database
  timescaledb:
    image: timescale/timescaledb:latest-pg15
    container_name: mediconnect-timescaledb
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${TIMESCALE_USER:-mediconnect_timescale}
      POSTGRES_PASSWORD: ${TIMESCALE_PASSWORD:-dev_password_123}
      POSTGRES_DB: ${TIMESCALE_DB:-mediconnect_timeseries}
    ports:
      - '${TIMESCALE_PORT:-5433}:5432'
    volumes:
      - timescale_data:/var/lib/postgresql/data
    networks:
      - mediconnect-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${TIMESCALE_USER:-mediconnect_timescale}']
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB - Document Database for Vitals
  mongodb:
    image: mongo:7
    container_name: mediconnect-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USER:-mediconnect_mongo}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD:-dev_password_123}
      MONGO_INITDB_DATABASE: ${MONGODB_DB:-mediconnect_vitals}
    ports:
      - '${MONGODB_PORT:-27017}:27017'
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
    networks:
      - mediconnect-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis - Cache & Session Store
  redis:
    image: redis:7-alpine
    container_name: mediconnect-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-dev_password_123} --appendonly yes
    ports:
      - '${REDIS_PORT:-6379}:6379'
    volumes:
      - redis_data:/data
    networks:
      - mediconnect-network
    healthcheck:
      test: ['CMD', 'redis-cli', '--raw', 'incr', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka - Message Broker
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: mediconnect-zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - mediconnect-network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: mediconnect-kafka
    restart: unless-stopped
    depends_on:
      - zookeeper
    ports:
      - '${KAFKA_PORT:-9092}:9092'
      - '${KAFKA_EXTERNAL_PORT:-9093}:9093'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_LOG_RETENTION_HOURS: 168
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - mediconnect-network
    healthcheck:
      test: ['CMD', 'kafka-broker-api-versions', '--bootstrap-server', 'localhost:9092']
      interval: 30s
      timeout: 10s
      retries: 5

  # Kafka UI (optional - for development)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: mediconnect-kafka-ui
    restart: unless-stopped
    depends_on:
      - kafka
    ports:
      - '8080:8080'
    environment:
      KAFKA_CLUSTERS_0_NAME: mediconnect
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - mediconnect-network

  # Mailhog - Email Testing (Development)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: mediconnect-mailhog
    restart: unless-stopped
    ports:
      - '1025:1025' # SMTP
      - '8025:8025' # Web UI
    networks:
      - mediconnect-network

  # Mosquitto - MQTT Broker for IoT Devices
  mosquitto:
    image: eclipse-mosquitto:2
    container_name: mediconnect-mosquitto
    restart: unless-stopped
    ports:
      - '1883:1883' # MQTT
      - '9001:9001' # WebSocket
    volumes:
      - mosquitto_data:/mosquitto/data
      - mosquitto_logs:/mosquitto/log
      - ./mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf
    networks:
      - mediconnect-network

  # pgAdmin - PostgreSQL Admin UI (optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: mediconnect-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@mediconnect.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin123}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - '5050:80'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - mediconnect-network
    depends_on:
      - postgres

  # Mongo Express - MongoDB Admin UI (optional)
  mongo-express:
    image: mongo-express:latest
    container_name: mediconnect-mongo-express
    restart: unless-stopped
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGODB_USER:-mediconnect_mongo}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGODB_PASSWORD:-dev_password_123}
      ME_CONFIG_MONGODB_URL: mongodb://${MONGODB_USER:-mediconnect_mongo}:${MONGODB_PASSWORD:-dev_password_123}@mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin123
    ports:
      - '8081:8081'
    networks:
      - mediconnect-network
    depends_on:
      - mongodb

# Volumes
volumes:
  postgres_data:
    driver: local
  timescale_data:
    driver: local
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  redis_data:
    driver: local
  kafka_data:
    driver: local
  zookeeper_data:
    driver: local
  zookeeper_logs:
    driver: local
  mosquitto_data:
    driver: local
  mosquitto_logs:
    driver: local
  pgadmin_data:
    driver: local

# Networks
networks:
  mediconnect-network:
    driver: bridge
    name: mediconnect-network
